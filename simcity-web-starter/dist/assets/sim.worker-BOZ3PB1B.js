var b=Object.defineProperty;var A=(c,i,t)=>i in c?b(c,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[i]=t;var o=(c,i,t)=>A(c,typeof i!="symbol"?i+"":i,t);const e={FIELD_WIDTH:128,FIELD_HEIGHT:128,CELL_SIZE:16,DEMAND_SMOOTHING:.1,BASE_DEMAND_RATE:.01,MAX_DEMAND:1,MIN_DEMAND:-.5,IDEAL_RCI_RATIO:{R:.5,C:.3,I:.2},JOBS_PER_COMMERCIAL:4,JOBS_PER_INDUSTRIAL:8,PEOPLE_PER_RESIDENTIAL:4,SPAWN_THRESHOLD:.7,UPGRADE_THRESHOLD:.8,UPGRADE_SUSTAINED_TICKS:60,ABANDON_THRESHOLD:.2,ABANDON_SUSTAINED_TICKS:120,CIVIC_RADII:{school:48,hospital:64,park:32,police:56,fire:56,power:80,water:80},CIVIC_STRENGTHS:{school:.3,hospital:.25,park:.2,police:.15,fire:.15,power:.4,water:.4},POLLUTION_STRENGTH:-.3,TRAFFIC_IMPACT:-.1,INDUSTRIAL_POLLUTION_RATE:.5,COMMERCIAL_TRAFFIC_RATE:.3,RESIDENTIAL_TRAFFIC_RATE:.2,TAX_RATE:.1,TAX_IMPACT_ON_DEMAND:-.2};class g{constructor(){o(this,"era","2010s");o(this,"seed",1);o(this,"tickCount",0);o(this,"zones",new Map);o(this,"zoneGrid",[]);o(this,"nextZoneId",1);o(this,"civicBuildings",new Map);o(this,"nextCivicId",1);o(this,"demand",{residential:.8,commercial:.5,industrial:.4});o(this,"residentialDesirability");o(this,"commercialDesirability");o(this,"industrialDesirability");o(this,"pollutionField");o(this,"trafficField");o(this,"stats",{population:0,jobs:0,unemployed:0,taxRevenue:0,maintenanceCost:0,happiness:.5});const i=e.FIELD_WIDTH*e.FIELD_HEIGHT;this.residentialDesirability={width:e.FIELD_WIDTH,height:e.FIELD_HEIGHT,data:new Float32Array(i)},this.commercialDesirability={width:e.FIELD_WIDTH,height:e.FIELD_HEIGHT,data:new Float32Array(i)},this.industrialDesirability={width:e.FIELD_WIDTH,height:e.FIELD_HEIGHT,data:new Float32Array(i)},this.pollutionField={width:e.FIELD_WIDTH,height:e.FIELD_HEIGHT,data:new Float32Array(i)},this.trafficField={width:e.FIELD_WIDTH,height:e.FIELD_HEIGHT,data:new Float32Array(i)},this.initializeZoneGrid()}initializeZoneGrid(){const i=Math.ceil(e.FIELD_WIDTH*e.CELL_SIZE/16),t=Math.ceil(e.FIELD_HEIGHT*e.CELL_SIZE/16);this.zoneGrid=Array(t).fill(null).map(()=>Array(i).fill(null))}calculateDemand(){const i=this.stats.population,t=this.stats.jobs,a=i>0?this.stats.unemployed/i:0;let s={R:0,C:0,I:0,residential:0,commercial:0,industrial:0},n={R:0,C:0,I:0,residential:0,commercial:0,industrial:0};for(const p of this.zones.values())p.type in s&&(s[p.type]++,p.developed&&n[p.type]++);const h=s.R+s.C+s.I+s.residential+s.commercial+s.industrial;if(h===0)return;const l={R:(s.R+s.residential)/h,C:(s.C+s.commercial)/h,I:(s.I+s.industrial)/h};let u=e.BASE_DEMAND_RATE;t>i*.8&&(u+=.3),l.R<e.IDEAL_RCI_RATIO.R&&(u+=.2),a>.1&&(u-=.1);let d=e.BASE_DEMAND_RATE;i>n.C*e.JOBS_PER_COMMERCIAL*2&&(d+=.3),l.C<e.IDEAL_RCI_RATIO.C&&(d+=.15),n.I>n.C*1.5&&(d+=.1);let r=e.BASE_DEMAND_RATE;n.C>n.I*2&&(r+=.25),l.I<e.IDEAL_RCI_RATIO.I&&(r+=.15),a<.05&&i>100&&(r+=.2);const I=e.TAX_RATE*e.TAX_IMPACT_ON_DEMAND;u+=I,d+=I*.5,r+=I*.3,this.demand.residential=this.smoothDemand(this.demand.residential,u),this.demand.commercial=this.smoothDemand(this.demand.commercial,d),this.demand.industrial=this.smoothDemand(this.demand.industrial,r),this.demand.residential=Math.max(e.MIN_DEMAND,Math.min(e.MAX_DEMAND,this.demand.residential)),this.demand.commercial=Math.max(e.MIN_DEMAND,Math.min(e.MAX_DEMAND,this.demand.commercial)),this.demand.industrial=Math.max(e.MIN_DEMAND,Math.min(e.MAX_DEMAND,this.demand.industrial))}smoothDemand(i,t){return i+(t-i)*e.DEMAND_SMOOTHING}updateDesirabilityFields(){this.residentialDesirability.data.fill(0),this.commercialDesirability.data.fill(0),this.industrialDesirability.data.fill(0),this.pollutionField.data.fill(0),this.trafficField.data.fill(0);for(const i of this.civicBuildings.values())this.applyCivicCoverage(i);for(const i of this.zones.values())i.developed&&this.applyZoneEffects(i);this.blurField(this.residentialDesirability),this.blurField(this.commercialDesirability),this.blurField(this.industrialDesirability),this.blurField(this.pollutionField),this.blurField(this.trafficField),this.applyNegativeEffects(),this.updateZoneDesirability()}applyCivicCoverage(i){const t=Math.floor(i.position.x/e.CELL_SIZE),a=Math.floor(i.position.y/e.CELL_SIZE),s=i.radius/e.CELL_SIZE,n=["school","hospital","park","police","fire","power","water"].includes(i.type),h=["police","fire","power","water"].includes(i.type),l=["power","water","fire"].includes(i.type),u=s*s;for(let d=-Math.ceil(s);d<=Math.ceil(s);d++)for(let r=-Math.ceil(s);r<=Math.ceil(s);r++){const I=r*r+d*d;if(I>u)continue;const p=t+r,f=a+d;if(p<0||p>=e.FIELD_WIDTH||f<0||f>=e.FIELD_HEIGHT)continue;const D=f*e.FIELD_WIDTH+p,m=Math.exp(-I/(u*.5))*i.strength;n&&(this.residentialDesirability.data[D]+=m),h&&(this.commercialDesirability.data[D]+=m*.8),l&&(this.industrialDesirability.data[D]+=m*.6)}}applyZoneEffects(i){const t=Math.floor(i.position.x/e.CELL_SIZE),a=Math.floor(i.position.y/e.CELL_SIZE);if(t<0||t>=e.FIELD_WIDTH||a<0||a>=e.FIELD_HEIGHT)return;const s=a*e.FIELD_WIDTH+t;i.type==="I"&&(this.pollutionField.data[s]+=i.pollutionGeneration*i.buildingLevel),this.trafficField.data[s]+=i.trafficGeneration*i.buildingLevel}blurField(i){const t=new Float32Array(i.data.length),a=i.width,s=i.height;for(let n=0;n<s;n++)for(let h=0;h<a;h++){let l=0,u=0;for(let d=-1;d<=1;d++)for(let r=-1;r<=1;r++){const I=h+r,p=n+d;I>=0&&I<a&&p>=0&&p<s&&(l+=i.data[p*a+I],u++)}t[n*a+h]=l/u}i.data.set(t)}applyNegativeEffects(){for(let i=0;i<this.residentialDesirability.data.length;i++)this.residentialDesirability.data[i]-=this.pollutionField.data[i]*e.POLLUTION_STRENGTH,this.residentialDesirability.data[i]-=this.trafficField.data[i]*e.TRAFFIC_IMPACT,this.commercialDesirability.data[i]-=this.pollutionField.data[i]*e.POLLUTION_STRENGTH*.5,this.commercialDesirability.data[i]-=this.trafficField.data[i]*e.TRAFFIC_IMPACT*.3,this.industrialDesirability.data[i]-=this.pollutionField.data[i]*e.POLLUTION_STRENGTH*.1,this.residentialDesirability.data[i]=Math.max(0,Math.min(1,this.residentialDesirability.data[i])),this.commercialDesirability.data[i]=Math.max(0,Math.min(1,this.commercialDesirability.data[i])),this.industrialDesirability.data[i]=Math.max(0,Math.min(1,this.industrialDesirability.data[i]))}updateZoneDesirability(){for(const i of this.zones.values()){const t=Math.floor(i.position.x/e.CELL_SIZE),a=Math.floor(i.position.y/e.CELL_SIZE);if(t<0||t>=e.FIELD_WIDTH||a<0||a>=e.FIELD_HEIGHT)continue;const s=a*e.FIELD_WIDTH+t;switch(i.type){case"R":i.desirability=this.residentialDesirability.data[s];break;case"C":i.desirability=this.commercialDesirability.data[s];break;case"I":i.desirability=this.industrialDesirability.data[s];break}}}processGrowthTriggers(){const i=this.tickCount;for(const t of this.zones.values()){if(!t.developed){const a=this.shouldSpawnBuilding(t);if(this.tickCount%180===0){const s=t.type==="R"?this.demand.residential:t.type==="C"?this.demand.commercial:this.demand.industrial;console.log(`[Sim] Zone ${t.id} spawn check: ${a}, demand: ${s.toFixed(2)}, desirability: ${t.desirability.toFixed(2)}`)}a&&(console.log(`[Sim] Spawning building in zone ${t.id}!`),this.spawnBuilding(t))}t.developed&&t.buildingLevel<5&&t.desirability>e.UPGRADE_THRESHOLD&&i-t.lastUpgradeTime>e.UPGRADE_SUSTAINED_TICKS&&this.upgradeBuilding(t),t.developed&&t.desirability<e.ABANDON_THRESHOLD&&i-t.lastUpgradeTime>e.ABANDON_SUSTAINED_TICKS&&this.abandonBuilding(t)}}shouldSpawnBuilding(i){let t=0;switch(i.type){case"R":t=this.demand.residential;break;case"C":t=this.demand.commercial;break;case"I":t=this.demand.industrial;break}const a=t>.5,s=i.desirability>.25;return a||s}spawnBuilding(i){switch(i.developed=!0,i.buildingLevel=1,i.lastUpgradeTime=this.tickCount,i.type){case"R":i.population=e.PEOPLE_PER_RESIDENTIAL,i.trafficGeneration=e.RESIDENTIAL_TRAFFIC_RATE;break;case"C":i.jobs=e.JOBS_PER_COMMERCIAL,i.trafficGeneration=e.COMMERCIAL_TRAFFIC_RATE;break;case"I":i.jobs=e.JOBS_PER_INDUSTRIAL,i.pollutionGeneration=e.INDUSTRIAL_POLLUTION_RATE,i.trafficGeneration=e.RESIDENTIAL_TRAFFIC_RATE;break}this.updateStatistics(),this.sendGrowthEvent("spawn",i)}upgradeBuilding(i){i.buildingLevel++,i.lastUpgradeTime=this.tickCount;const t=1+i.buildingLevel*.5;switch(i.type){case"R":i.population=Math.floor(e.PEOPLE_PER_RESIDENTIAL*t);break;case"C":i.jobs=Math.floor(e.JOBS_PER_COMMERCIAL*t);break;case"I":i.jobs=Math.floor(e.JOBS_PER_INDUSTRIAL*t),i.pollutionGeneration=e.INDUSTRIAL_POLLUTION_RATE*(1+i.buildingLevel*.3);break}i.trafficGeneration*=1.2,this.updateStatistics(),this.sendGrowthEvent("upgrade",i)}abandonBuilding(i){i.developed=!1,i.buildingLevel=0,i.population=0,i.jobs=0,i.pollutionGeneration=0,i.trafficGeneration=0,i.lastUpgradeTime=this.tickCount,this.updateStatistics(),this.sendGrowthEvent("abandon",i)}updateStatistics(){let i=0,t=0,a=0;for(const l of this.zones.values())i+=l.population,t+=l.jobs,l.developed&&(a+=l.population*e.TAX_RATE*10,a+=l.jobs*e.TAX_RATE*15);let s=0;for(const l of this.civicBuildings.values())s+=l.maintenanceCost;this.stats.population=i,this.stats.jobs=t,this.stats.unemployed=Math.max(0,i-t),this.stats.taxRevenue=a,this.stats.maintenanceCost=s;const n=i>0?Math.min(1,t/i):.5,h=this.calculateAverageServiceQuality();this.stats.happiness=n*.6+h*.4}calculateAverageServiceQuality(){if(this.zones.size===0)return .5;let i=0,t=0;for(const a of this.zones.values())a.type==="R"&&a.developed&&(i+=a.desirability,t++);return t>0?i/t:.5}handleMessage(i){switch(i.type){case"set-era":this.era=i.era;break;case"boot":this.seed=i.seed??this.seed;break;case"update-zones":this.updateZonesFromProcgen(i.zones);break;case"add-zone":if(console.log("[Sim] Received add-zone message:",i),i.zone){if(!i.zone.id&&i.zone.id!==0){console.error("[Sim] Zone missing ID!",i.zone);return}if(!i.zone.type){console.error("[Sim] Zone missing type!",i.zone);return}if(!i.zone.position){console.error("[Sim] Zone missing position!",i.zone);return}const t={id:i.zone.id,type:i.zone.type,position:i.zone.position,developed:!1,buildingLevel:0,population:0,jobs:0,desirability:.6,lastUpgradeTime:0,trafficGeneration:0,pollutionGeneration:0};this.zones.set(t.id,t),console.log("[Sim] Added zone",t.id,"type:",t.type,"at",t.position,"Total zones:",this.zones.size),console.log("[Sim] Current demand - R:",this.demand.residential,"C:",this.demand.commercial,"I:",this.demand.industrial),console.log("[Sim] Spawn threshold:",e.SPAWN_THRESHOLD,"Desirability threshold: 0.3");const a=this.shouldSpawnBuilding(t);if(console.log("[Sim] Can spawn building?",a),!t.developed&&a)console.log("[Sim] Zone meets spawn criteria immediately! Spawning building..."),this.spawnBuilding(t);else{const s=t.type==="R"?this.demand.residential:t.type==="C"?this.demand.commercial:this.demand.industrial;console.log("[Sim] Zone does not meet spawn criteria. Demand:",s,"> 0.7?",s>.7,"Desirability:",t.desirability,"> 0.3?",t.desirability>.3)}}else console.error("[Sim] No zone data in message!");break;case"get-demand":self.postMessage({type:"demand-data",demand:{...this.demand}});break;case"get-desirability":self.postMessage({type:"desirability-data",residential:this.getFieldData(this.residentialDesirability),commercial:this.getFieldData(this.commercialDesirability),industrial:this.getFieldData(this.industrialDesirability),pollution:this.getFieldData(this.pollutionField),traffic:this.getFieldData(this.trafficField)});break;case"place-civic":this.placeCivicBuilding(i.civic);break;case"get-stats":self.postMessage({type:"stats-data",stats:{...this.stats}});break}}updateZonesFromProcgen(i){this.zones.clear();for(const t of i){const a={id:this.nextZoneId++,type:t.type,position:t.position,developed:!1,buildingLevel:0,population:0,jobs:0,desirability:0,lastUpgradeTime:0,trafficGeneration:0,pollutionGeneration:0};this.zones.set(a.id,a);const s=Math.floor(a.position.x/16),n=Math.floor(a.position.y/16);s>=0&&s<this.zoneGrid[0].length&&n>=0&&n<this.zoneGrid.length&&(this.zoneGrid[n][s]=a)}}placeCivicBuilding(i){const t={id:this.nextCivicId++,type:i.type,position:i.position,radius:e.CIVIC_RADII[i.type],strength:e.CIVIC_STRENGTHS[i.type],maintenanceCost:i.maintenanceCost??100};this.civicBuildings.set(t.id,t),this.updateDesirabilityFields(),self.postMessage({type:"civic-placed",civicId:t.id})}getFieldData(i){const t=i.data.buffer;if(t instanceof SharedArrayBuffer){const a=new ArrayBuffer(t.byteLength);return new Uint8Array(a).set(new Uint8Array(t)),a}return t.slice(0)}sendGrowthEvent(i,t){const a=t.buildingLevel<=2?"low":t.buildingLevel<=4?"medium":"high";self.postMessage({type:"growth-event",event:i,zoneId:t.id,zoneType:t.type,position:t.position,level:t.buildingLevel,density:a}),(i==="spawn"||i==="upgrade")&&self.postMessage({type:"generate-building",zoneId:t.id,zoneType:t.type==="R"?"residential":t.type==="C"?"commercial":"industrial",zoneDensity:a,buildingLevel:t.buildingLevel,position:t.position})}tick(i){this.tickCount++,this.tickCount%6===0&&this.calculateDemand(),this.tickCount%12===0&&this.updateDesirabilityFields(),this.tickCount%30===0&&this.processGrowthTriggers(),this.tickCount%60===0&&(this.updateStatistics(),self.postMessage({type:"demand-data",demand:{...this.demand}}),self.postMessage({type:"stats-data",stats:{...this.stats}}))}}const _=new g;let E=0,y=performance.now();function L(c){_.tick(c)}function T(){const c=performance.now();let i=c-y;for(y=c,E+=i;E>=16.6667;)L(16.6667),E-=16.6667;self.requestAnimationFrame(T)}T();self.onmessage=c=>{_.handleMessage(c.data)};
