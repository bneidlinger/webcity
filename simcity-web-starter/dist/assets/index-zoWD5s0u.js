(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))s(o);new MutationObserver(o=>{for(const i of o)if(i.type==="childList")for(const n of i.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function a(o){const i={};return o.integrity&&(i.integrity=o.integrity),o.referrerPolicy&&(i.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?i.credentials="include":o.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(o){if(o.ep)return;o.ep=!0;const i=a(o);fetch(o.href,i)}})();const p=document.getElementById("view"),y=document.getElementById("era"),R=document.getElementById("fps"),B=document.getElementById("zoom"),G=document.getElementById("population"),Y=document.getElementById("budget");let x=Math.floor(Math.random()*4294967295)>>>0,m="road",I=!1,d=null,v=!1,S=0,W=5e4;const g=new Worker(new URL("/assets/render.worker-BGDRGJws.js",import.meta.url),{type:"module"}),u=new Worker(new URL("/assets/sim.worker-BOZ3PB1B.js",import.meta.url),{type:"module"}),f=new Worker(new URL("/assets/procgen.worker-D6QNm9L9.js",import.meta.url),{type:"module"}),O=new Worker(new URL("/assets/ai.worker-BRkS80v7.js",import.meta.url),{type:"module"});function A(){if("transferControlToOffscreen"in p){p.width=window.innerWidth,p.height=window.innerHeight;const t=p.transferControlToOffscreen();g.postMessage({type:"init",canvas:t},[t]),window.addEventListener("resize",()=>{g.postMessage({type:"resize",width:window.innerWidth,height:window.innerHeight})})}else{let t=function(){e.fillStyle="#10131a",e.fillRect(0,0,p.width,p.height),e.fillStyle="#9ca3af",e.fillText("OffscreenCanvas not supported. WebGL rendering disabled.",20,30),requestAnimationFrame(t)};const e=p.getContext("2d"),a=()=>{p.width=window.innerWidth,p.height=window.innerHeight};a(),window.addEventListener("resize",a),t()}}let E={x:0,y:0},Z=1;function P(t,e,a=!1){const o=window.innerWidth/window.innerHeight,i=t/window.innerWidth*2-1,n=-(e/window.innerHeight*2-1),l=E.x/window.innerWidth*2,c=E.y/window.innerHeight*2,r=i-l,b=n+c,h=2*Z/1e3,z=Math.sqrt(3),M=r*o/(z/2*h),w=b/(.5*h),L=(M+w)/2,C=(w-M)/2,T=(L+500)*2,k=(C+500)*2;if(a){const X=Math.round(T/40)*40,D=Math.round(k/40)*40;return{x:X,z:D}}return{x:T,z:k}}p.addEventListener("mousedown",t=>{if(t.button===0){I=!0;const e=m==="road",a=P(t.clientX,t.clientY,e);d={x:a.x,y:a.z},console.log("[Main] Mouse down - Tool:",m,"at screen:",t.clientX,t.clientY,"world:",a,"snapped:",e)}});p.addEventListener("mousemove",t=>{if(t.buttons===2&&g.postMessage({type:"mouse-move",x:t.clientX,y:t.clientY,buttons:t.buttons}),I&&d&&t.buttons===1&&m==="road"){const a=P(t.clientX,t.clientY,!0),s={x:a.x,y:a.z},o=Math.abs(s.x-d.x),i=Math.abs(s.y-d.y);o>i?s.y=d.y:s.x=d.x;const n=new Float32Array(6);n[0]=d.x,n[1]=d.y,n[2]=s.x,n[3]=s.y,n[4]=12,n[5]=0,g.postMessage({type:"preview-road",segment:n})}});p.addEventListener("mouseup",t=>{if(g.postMessage({type:"mouse-up"}),t.button===0&&I){if(I=!1,d){const e=m==="road",a=P(t.clientX,t.clientY,e);if(m==="road"){const s={x:a.x,y:a.z},o=Math.abs(s.x-d.x),i=Math.abs(s.y-d.y);o>i?s.y=d.y:s.x=d.x,console.log("[Main] Painting road from",d,"to",s),f.postMessage({type:"paint-road",start:d,end:s,roadClass:"street"})}else if(m.startsWith("zone-")){console.log("[Main] Zone tool detected:",m),console.log("[Main] Paint start:",d,"Paint end:",a);const s=Math.min(d.x,a.x),o=Math.max(d.x,a.x),i=Math.min(d.y,a.z),n=Math.max(d.y,a.z),l=Math.abs(o-s),c=Math.abs(n-i);if(l<20||c<20){const r=(s+o)/2,b=(i+n)/2,h=r-20,z=r+20,M=b-20,w=b+20,L={"zone-r":"residential","zone-c":"commercial","zone-i":"industrial"};console.log("[Main] Painting zone (adjusted):",m,"bounds:",h,M,z,w),f.postMessage({type:"paint-zone",polygon:[{x:h,y:M},{x:z,y:M},{x:z,y:w},{x:h,y:w}],zoneType:L[m],zoneDensity:"medium",subdivisionMethod:"skeleton"})}else{const r={"zone-r":"residential","zone-c":"commercial","zone-i":"industrial"};console.log("[Main] Painting zone:",m,"from",d,"to",a),console.log("[Main] Zone bounds:",s,i,o,n),f.postMessage({type:"paint-zone",polygon:[{x:s,y:i},{x:o,y:i},{x:o,y:n},{x:s,y:n}],zoneType:r[m],zoneDensity:"medium",subdivisionMethod:"skeleton"})}}}d=null}});p.addEventListener("wheel",t=>{t.preventDefault(),g.postMessage({type:"mouse-wheel",deltaY:t.deltaY})});p.addEventListener("contextmenu",t=>{t.preventDefault()});g.onmessage=t=>{const e=t.data;e.type==="stats"?(R.textContent=e.fps.toFixed(0),e.zoom!==void 0&&(B.textContent=e.zoom.toFixed(1)+"x")):e.type==="camera-update"&&(Z=e.zoom||1,E.x=e.panX||0,E.y=e.panY||0)};u.onmessage=t=>{const e=t.data;switch(e.type){case"growth-event":console.log("[Main] Growth event:",e.event,"for zone",e.zoneId,"type:",e.zoneType,"level:",e.level);break;case"generate-building":console.log("[Main] Generate building for zone",e.zoneId,e.zoneType,"level:",e.buildingLevel),f.postMessage({type:"generate-building-for-zone",zoneId:e.zoneId,zoneType:e.zoneType,zoneDensity:e.zoneDensity,level:e.buildingLevel,position:e.position,event:"spawn"});break;case"demand-data":if(console.log("Demand:",e.demand),e.demand){const a=document.getElementById("demand-r"),s=document.getElementById("demand-c"),o=document.getElementById("demand-i");a&&(a.style.height=Math.max(0,Math.min(100,e.demand.residential*100))+"%"),s&&(s.style.height=Math.max(0,Math.min(100,e.demand.commercial*100))+"%"),o&&(o.style.height=Math.max(0,Math.min(100,e.demand.industrial*100))+"%")}break;case"stats-data":console.log("City stats:",e.stats),e.stats&&(e.stats.population!==void 0&&(S=e.stats.population,G.textContent=S.toLocaleString()),e.stats.budget!==void 0&&(W=e.stats.budget,Y.textContent="$"+W.toLocaleString()));break}};f.onmessage=t=>{var a,s,o,i;const e=t.data;switch(console.log("[Main] Message from procgen:",e.type),e.type){case"roads-generated":if(console.log("[Main] Roads generated, sending to renderer. Segments:",(a=e.segments)==null?void 0:a.length),e.segments&&e.segments.length>0){const n=new Float32Array(e.segments.length*6);for(let l=0;l<e.segments.length;l++){const c=e.segments[l],r=l*6;n[r]=c.start.x,n[r+1]=c.start.y,n[r+2]=c.end.x,n[r+3]=c.end.y,n[r+4]=c.width,n[r+5]=0}g.postMessage({type:"update-roads",data:{roadSegments:n}})}u.postMessage({type:"update-roads",roads:e.segments});break;case"parcels-generated":u.postMessage({type:"update-zones",zones:e.parcels});break;case"buildings-generated":g.postMessage({type:"update-buildings",data:{buildings:e.buildings}});break;case"building-spawned":console.log("[Main] Building spawned for zone",e.zoneId,"parcel",e.parcelId),e.meshData&&g.postMessage({type:"add-building",data:{buildingId:(s=e.building)==null?void 0:s.id,parcelId:e.parcelId,meshData:e.meshData,lod:e.lod}});break;case"zones-updated":console.log("[Main] Zones updated, sending to renderer"),g.postMessage({type:"update-zones",data:e.data});break;case"road-painted":if(console.log("[Main] Road painted, success:",e.success),e.success&&e.segments){const n=new Float32Array(e.segments.length*6);for(let l=0;l<e.segments.length;l++){const c=e.segments[l],r=l*6;n[r]=c.start.x,n[r+1]=c.start.y,n[r+2]=c.end.x,n[r+3]=c.end.y,n[r+4]=c.width,n[r+5]=0}g.postMessage({type:"update-roads",data:{roadSegments:n}})}break;case"zone-painted":if(console.log("[Main] Zone painted, affected parcels:",((o=e.affectedParcels)==null?void 0:o.length)||((i=e.affectedParcelIds)==null?void 0:i.length)),console.log("[Main] Parcels data:",e.parcels),e.parcels&&g.postMessage({type:"update-zones",data:e.parcels}),e.affectedParcels&&e.affectedParcels.length>0){console.log("[Main] Sending",e.affectedParcels.length,"zones to simulation");for(const n of e.affectedParcels){const l={id:n.id,type:n.zoneType==="residential"?"R":n.zoneType==="commercial"?"C":"I",position:{x:n.centroid.x,y:n.centroid.y},area:n.area,frontage:n.frontage};console.log("[Main] Adding zone to sim:",l),u.postMessage({type:"add-zone",zone:l})}}break}};y.addEventListener("change",()=>{const t=y.value;u.postMessage({type:"set-era",era:t}),g.postMessage({type:"set-era",era:t}),f.postMessage({type:"set-era",era:t})});window.addEventListener("tool-changed",t=>{m=t.detail,console.log("[Main] Tool changed to:",m)});window.addEventListener("toggle-pause",()=>{u.postMessage({type:"toggle-pause"})});window.addEventListener("shuffle-seed",()=>{x=x+1>>>0,f.postMessage({type:"shuffle-seed",seed:x}),u.postMessage({type:"boot",seed:x})});window.addEventListener("toggle-timelapse",()=>{if(v=!v,v){let t=y.selectedIndex;const e=()=>{v&&(t=(t+1)%y.options.length,y.selectedIndex=t,y.dispatchEvent(new Event("change")),setTimeout(e,3e3))};e()}});function F(){A();const t=y.value;u.postMessage({type:"boot",seed:x}),f.postMessage({type:"boot",seed:x,era:t}),O.postMessage({type:"boot"}),g.postMessage({type:"boot"}),setTimeout(()=>{f.postMessage({type:"get-roads"})},100),setInterval(()=>{u.postMessage({type:"get-demand"}),u.postMessage({type:"get-stats"})},1e3)}F();console.log("%cSimCity Web Prototype","font-size: 20px; font-weight: bold; color: #4CAF50");console.log("Controls:");console.log("  Left Mouse: Paint roads/zones or rotate camera");console.log("  Right Mouse: Pan camera");console.log("  Mouse Wheel: Zoom in/out");console.log("  Keys 1-4: Switch tools (Road, Zone R/C/I)");console.log("  Space: Pause/resume simulation");
